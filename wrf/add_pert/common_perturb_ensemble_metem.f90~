MODULE common_perturb_ensemble
!=======================================================================
!
! [PURPOSE:] Common Information for WRF
!
! [HISTORY:]
!   10/15/2004 Takemasa Miyoshi  created
!   01/23/2009 Takemasa Miyoshi  modified
!   07/14/2010 Takemasa Miyoshi  modified for WRF
!
!=======================================================================
!$USE OMP_LIB
  USE common
  USE common_wrf
  USE common_smooth2d
  IMPLICIT NONE
  PUBLIC
!-----------------------------------------------------------------------
! General parameters
!-----------------------------------------------------------------------

  LOGICAL :: PERTURB_T , PERTURB_RH , PERTURB_WIND   !Whether this variables will be perturbed.
  REAL(r_size) :: PERTURB_T_AMP , PERTURB_RH_AMP , PERTURB_WIND_AMP   !Amplitude of the perturbations.
  REAL(r_size) :: PERTURB_T_SCLH , PERTURB_RH_SCLH , PERTURB_WIND_SCLH  !Horizontal scale of the perturbations.
  REAL(r_size) :: PERTURB_T_SCLV , PERTURB_RH_SCLV , PERTURB_WIND_SCLV  !Horizontal scale of the perturbations.

CONTAINS
!-----------------------------------------------------------------------
! Set the parameters
!-----------------------------------------------------------------------
SUBROUTINE  PERTURB_MEMBER(var3d,var2d,pert3d,pert2d)
  IMPLICIT NONE
  REAL(r_size) :: var3d(nlon,nlat,nlev,nv3d) , var2d(nlon,nlat,nv2d)
  REAL(r_size) :: pert3d(nlon,nlat,nlev,nv3d) , pert2d(nlon,nlat,nv2d)
  REAL(r_size) :: tmpfield(nlon,nlat,nlev) , tmpval(1)
  INTEGER      :: i , j , k , iv
  INTEGER      :: filter_size_x , filter_size_z 
  REAL(r_size) :: AMP , SCLH , SCLV 
  REAL(r_size) :: dz
  REAL(r_size) :: max_pert , min_pert , amp_factor
  INTEGER      :: maskh(nlon,nlat),maskv(nlev)
  CHARACTER(256) :: filter_type 
  INTEGER      :: ii,jj,kk
  REAL(r_size) :: factor
  !In this case on output we get the perturbation (not the full field)

  pert3d=0.0d0
  pert2d=0.0d0 

  filter_type = 'Lanczos'
  maskh       = 1
  maskv       = 1


     DO iv = 1 , nv3d
          
           IF( iv == iv3d_t  .AND.  PERTURB_T )THEN
             AMP=PERTURB_T_AMP
             SCLH=PERTURB_T_SCLH
             SCLV=PERTURB_T_SCLV
           ELSEIF( iv == iv3d_rh .AND.  PERTURB_RH )THEN
             AMP=PERTURB_RH_AMP
             SCLH=PERTURB_RH_SCLH
             SCLV=PERTURB_RH_SCLV
           ELSEIF( ( iv == iv3d_u .OR. iv == iv3d_v .OR. iv == iv3d_w ) .AND. PERTURB_WIND )THEN
             AMP=PERTURB_WIND_AMP
             SCLH=PERTURB_WIND_SCLH
             SCLV=PERTURB_WIND_SCLV
           ELSE
             CYCLE
           ENDIF

           !PERTURB VARIBLE IV
           filter_size_x = NINT( SCLH / dx )     
           dz= var3d(2,2,nlev-1,iv3d_ght)/gg / REAL(nlev,r_size)  !Approximate dz asuming equispaced levels.      
           filter_size_z = NINT( SCLV / dz )

           DO k=1,nlev
             DO j=1,nlat
                CALL com_randn2(nlon,tmpfield(:,j,k),0)
             ENDDO
             CALL filter_2d(tmpfield(:,:,k),tmpfield(:,:,k),maskh,filter_size_x,filter_type,nlon,nlat)
           ENDDO 
           DO i =1,nlat
            DO j =1,nlon
             CALL filter_2d(tmpfield(i,j,:),tmpfield(i,j,:),maskv,filter_size_z,filter_type,nlev,1)
            ENDDO
           ENDDO

          ! Adjust the amplitud of the perturbation.
          max_pert = -9.99d9
          min_pert =  9.99d9

          DO i = 1 , nlon
           DO j = 1 , nlat
            DO k = 1, nlev
              IF( tmpfield(i,j,k) .GT. max_pert )max_pert=tmpfield(i,j,k)
              IF( tmpfield(i,j,k) .GT. min_pert )min_pert=tmpfield(i,j,k)
            ENDDO
           ENDDO
          ENDDO
          amp_factor =  AMP / ( max_pert - min_pert )
          tmpfield= tmpfield * AMP

          !Damp perturbation near the boundaries.
          !CALL damp_latbnd_double(spec_bdy_width,nlon,nlat,nlev,tmpfield)
          !Apply perturbation

          pert3d(:,:,:,iv)=pert3d(:,:,:,iv)+tmpfield

     ENDDO



  RETURN
END SUBROUTINE PERTURB_MEMBER


END MODULE common_perturb_ensemble
